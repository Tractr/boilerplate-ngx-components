import {Component, OnDestroy, OnInit} from '@angular/core';
import {ActivatedRoute} from '@angular/router';
import {Router} from '@angular/router';
import {Subscription} from 'rxjs/Subscription';
import {ErrorService} from '@app/services';
import {<<M AA>>} from '../../<<M a-a>>';
import {<<M AA>>Service} from '../../<<M a-a>>.service';
 
@Component({
  selector: 'hpf-<<M a-a>>-read',
  templateUrl: './<<M a-a>>-read.component.html'
})
export class <<M AA>>ReadComponent implements OnInit, OnDestroy {

  /** @type {<<M AA>>} The <<M a>> */
  <<M aA>>: <<M AA>>;
  /** @type {Subscription} The id subscription */
  private idSubscription: Subscription;

  /**
   * Constructor
   * @param {ActivatedRoute} route
   * @param {Router} router
   * @param {ErrorService} errorService
   * @param {<<M AA>>Service} <<M aA>>Service
   */
  constructor(private route: ActivatedRoute,
              private router: Router,
              private errorService: ErrorService,
              private <<M aA>>Service: <<M AA>>Service) {
  }

  /** Init */
  ngOnInit() {
    // Get the <<M a>> after reading the id
    this.idSubscription = this.route.params.subscribe(params => {
      this.<<M aA>>Service.get(params['id'])
        .then((<<M aA>>: <<M AA>>) => {
          if (typeof this.<<M aA>> === 'undefined') {
            this.<<M aA>> = new <<M AA>>();
          }
          this.<<M aA>>.fromObject(<<M aA>>.toObject());
          this.<<M aA>>.next();
        })
        .catch((error) => this.errorService.handle(error));
    });
  }
  /** Destroy */
  ngOnDestroy() {
    this.idSubscription.unsubscribe();
  }
  /** Called when the <<M a>> is deleted */
  onDelete(): void {
    this.router.navigateByUrl('/<<M a-a>>');
  }
}
