<<if Model isGeoSearchable>>
<<# Define shortcuts to fields latitude/longitude >>
<<< let lat, lng; >>>
<<for1 Fields searchable and latitude f>><<< lat = f; >>><<endfor>>
<<for1 Fields searchable and longitude f>><<< lng = f; >>><<endfor>>
import {Component, OnInit, Input, Output, EventEmitter, OnDestroy} from '@angular/core';
import {Subject} from 'rxjs/Subject';
import {takeUntil} from 'rxjs/operators';
import {ErrorService} from '@app/services';
import {<<Model pascal>>SearchParams} from '../<<Model kebab>>-search-params';
import {<<Model pascal>>Service} from '../<<Model kebab>>.service';
import {<<Model pascal>>} from '../<<Model kebab>>';
 
@Component({
  selector: 'hpf-<<Model kebab>>-map',
  templateUrl: './<<Model kebab>>-map.component.html'
})
export class <<Model pascal>>MapComponent implements OnInit, OnDestroy {
 
  /** @type {<<Model pascal>>SearchParams} The search params */
  @Input() searchParams: <<Model pascal>>SearchParams;
  /** @type {EventEmitter} Triggered when the user select a marker */
  @Output() select = new EventEmitter<<<Model pascal>>>();
  /** @type {Subject<void>} Observables unsubscriber */
  private unsubscribe: Subject<void> = new Subject<void>();
  /** @type {any} The map object */
  map: any;
  /** @type {<<Model pascal>>[]} The found objects */
  items: <<Model pascal>>[] = [];
  /** @type {number} Length of the received results */
  total = 0;
  /** @type {boolean} Denotes if the map should fit the search params on loading */
  @Input() centerOnLoad = false;
  /** @type {any[]} The map styles */
  @Input() styles: any[] = [];
  /** @type {number} Start latitude */
  @Input() latitude = 45.5210724;
  /** @type {number} Start longitude */
  @Input() longitude = -73.6111978;
 
  /**
   * Constructor
   * @param {<<Model pascal>>Service} <<Model camel>>Service
   * @param {ErrorService} errorService
   */
  constructor(private <<Model camel>>Service: <<Model pascal>>Service,
              private errorService: ErrorService) {
  }

  /** Init */
  ngOnInit() {
    this.searchParams
        .pipe(takeUntil(this.unsubscribe))
        .subscribe(() => {
            this._refresh();
        });
  }
  /** Destroy */
  ngOnDestroy(): void {
    this.unsubscribe.next();
    this.unsubscribe.complete();
  }
  /**
   * On select
   * @param {<<Model pascal>>} item
   */
  onSelect(item: <<Model pascal>>) {
    this.select.emit(item);
  }
  /**
   * On select
   * @param {any} map
   */
  onReady(map: any) {
    this.map = map;
    // Set bounds if possible
    if (this.centerOnLoad) {
        const bounds = {
          south: this.searchParams.props.<<lat snake>>__min,
          north: this.searchParams.props.<<lat snake>>__max,
          west: this.searchParams.props.<<lng snake>>__min,
          east: this.searchParams.props.<<lng snake>>__max,
        };
        if (typeof bounds.south !== 'undefined' &&
            typeof bounds.west !== 'undefined' &&
            typeof bounds.north !== 'undefined' &&
            typeof bounds.east !== 'undefined') {
            this.map.fitBounds({
                south: Number(bounds.south),
                north: Number(bounds.north),
                west: Number(bounds.west),
                east: Number(bounds.east),
            });
        }
    }
  }
  /** Called when the user move the map */
  onIdle(): void {
    // Copy bounds to params
    const bounds = this.map.getBounds();
    const northEast = bounds.getNorthEast();
    const southWest = bounds.getSouthWest();
    // Latitude
    this.searchParams.props.<<lat snake>>__min = southWest.lat();
    this.searchParams.props.<<lat snake>>__max = northEast.lat();
    // Deal with borders -180/180 for longitudes
    // @Todo Solve this border issue on backend side by using an "$or" statement when lngMax < lngMin
    const lngMin = southWest.lng();
    const lngMax = northEast.lng();
    if (lngMin > lngMax) {
        // The map has more positive longitudes displayed
        if (Math.abs(lngMin) < Math.abs(lngMax)) {
            this.searchParams.props.<<lng snake>>__min = lngMin;
            delete this.searchParams.props.<<lng snake>>__max;
        } else {
            // The map has more negative longitudes displayed
            this.searchParams.props.<<lng snake>>__max = lngMax;
            delete this.searchParams.props.<<lng snake>>__min
        }
    } else {
        this.searchParams.props.<<lng snake>>__min = lngMin;
        this.searchParams.props.<<lng snake>>__max = lngMax;
    }
    // Trigger update
    this.searchParams.next();
  }
  /**
   * Refresh data from search params
   * @private
   */
  private _refresh(): void {
    const params = this.searchParams.toObject();
    // Get list
    this.<<Model camel>>Service.list(params)
      .then((results) => {
        // Link data
        this.items = results.items;
        this.total = results.total;
      })
      .catch((error) => this.errorService.handle(error));
  }

}
<<else>>
// No map for <<Model lower>>
<<endif>>